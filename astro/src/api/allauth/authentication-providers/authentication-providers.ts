/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * Allauth spec
 * OpenAPI spec version: 1
 */
import type {
  AuthenticatedResponse,
  ProviderRedirectBody,
  ProviderSignupBody,
  ProviderSignupResponse,
  ProviderTokenBody,
} from '../djangoAllauthHeadlessAPI.schemas';

import { customAxiosInstance } from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Initiates the third-party provider authentication redirect flow. As calling
this endpoint results in a user facing redirect (302), this call is only
available in a browser, and must be called in a synchronous (non-XHR)
manner.

 * @summary Provider redirect
 */
export const postAllauthBrowserV1AuthProviderRedirect = (
  providerRedirectBody: ProviderRedirectBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append(`provider`, providerRedirectBody.provider);
  formUrlEncoded.append(`callback_url`, providerRedirectBody.callback_url);
  formUrlEncoded.append(`process`, providerRedirectBody.process);

  return customAxiosInstance<unknown>(
    {
      url: `/_allauth/browser/v1/auth/provider/redirect`,
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      data: formUrlEncoded,
    },
    options
  );
};
/**
 * Authenticates with a third-party provider using provider tokens received
by other means. For example, in case of a mobile app, the authentication
flow runs completely on the device itself, without any interaction with
the API. Then, when the (device) authentication completes and the mobile
app receives an access and/or ID token, it can hand over these tokens
via this endpoint to authenticate on the server.

 * @summary Provider token
 */
export const postAllauthClientV1AuthProviderToken = (
  client: 'app' | 'browser',
  providerTokenBody: ProviderTokenBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedResponse>(
    {
      url: `/_allauth/${client}/v1/auth/provider/token`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: providerTokenBody,
    },
    options
  );
};
/**
 * If, while signing up using a third-party provider account, there is
insufficient information received from the provider to automatically
complete the signup process, an additional step is needed to complete
the missing data before the user is fully signed up and authenticated.
The information available so far, such as the pending provider account,
can be retrieved via this endpoint.

 * @summary Provider signup information
 */
export const getAllauthClientV1AuthProviderSignup = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<ProviderSignupResponse>(
    { url: `/_allauth/${client}/v1/auth/provider/signup`, method: 'GET' },
    options
  );
};
/**
 * If, while signing up using a third-party provider account, there is
insufficient information received from the provider to automatically
complete the signup process, an additional step is needed to complete
the missing data before the user is fully signed up and authenticated.

 * @summary Provider signup
 */
export const postAllauthClientV1AuthProviderSignup = (
  client: 'app' | 'browser',
  providerSignupBody: ProviderSignupBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedResponse>(
    {
      url: `/_allauth/${client}/v1/auth/provider/signup`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: providerSignupBody,
    },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type PostAllauthBrowserV1AuthProviderRedirectResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthBrowserV1AuthProviderRedirect>>
>;
export type PostAllauthClientV1AuthProviderTokenResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthProviderToken>>
>;
export type GetAllauthClientV1AuthProviderSignupResult = NonNullable<
  Awaited<ReturnType<typeof getAllauthClientV1AuthProviderSignup>>
>;
export type PostAllauthClientV1AuthProviderSignupResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthProviderSignup>>
>;
