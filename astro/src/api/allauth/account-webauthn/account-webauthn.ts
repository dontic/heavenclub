/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * Allauth spec
 * OpenAPI spec version: 1
 */
import type {
  AddWebAuthnAuthenticatorBody,
  AddWebAuthnAuthenticatorResponse,
  DeleteWebAuthnBody,
  StatusOKResponse,
  UpdateWebAuthnBody,
  WebAuthnAuthenticatorResponse,
  WebAuthnCreationOptionsResponseResponse,
} from '../djangoAllauthHeadlessAPI.schemas';

import { customAxiosInstance } from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns the WebAuthn credential creation options, that can be
processed using `parseCreationOptionsFromJSON()` on the frontend.

 * @summary Get WebAuthn credential creation options

 */
export const getAllauthClientV1AccountAuthenticatorsWebauthn = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<WebAuthnCreationOptionsResponseResponse>(
    { url: `/_allauth/${client}/v1/account/authenticators/webauthn`, method: 'GET' },
    options
  );
};
/**
 * You can alter the name of a WebAuthn credential by PUT'ting the ID and
name of the authenticator representing that credential. You can obtain
the credentials via the "List authenticators" endpoint.

 * @summary Rename a WebAuthn credential

 */
export const putAllauthClientV1AccountAuthenticatorsWebauthn = (
  client: 'app' | 'browser',
  updateWebAuthnBody: UpdateWebAuthnBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<WebAuthnAuthenticatorResponse>(
    {
      url: `/_allauth/${client}/v1/account/authenticators/webauthn`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateWebAuthnBody,
    },
    options
  );
};
/**
 * @summary Delete a WebAuthn credential

 */
export const deleteAllauthClientV1AccountAuthenticatorsWebauthn = (
  client: 'app' | 'browser',
  deleteWebAuthnBody: DeleteWebAuthnBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<StatusOKResponse>(
    {
      url: `/_allauth/${client}/v1/account/authenticators/webauthn`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: deleteWebAuthnBody,
    },
    options
  );
};
/**
 * @summary Add a WebAuthn credential

 */
export const postAllauthClientV1AccountAuthenticatorsWebauthn = (
  client: 'app' | 'browser',
  addWebAuthnAuthenticatorBody: AddWebAuthnAuthenticatorBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AddWebAuthnAuthenticatorResponse>(
    {
      url: `/_allauth/${client}/v1/account/authenticators/webauthn`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addWebAuthnAuthenticatorBody,
    },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type GetAllauthClientV1AccountAuthenticatorsWebauthnResult = NonNullable<
  Awaited<ReturnType<typeof getAllauthClientV1AccountAuthenticatorsWebauthn>>
>;
export type PutAllauthClientV1AccountAuthenticatorsWebauthnResult = NonNullable<
  Awaited<ReturnType<typeof putAllauthClientV1AccountAuthenticatorsWebauthn>>
>;
export type DeleteAllauthClientV1AccountAuthenticatorsWebauthnResult = NonNullable<
  Awaited<ReturnType<typeof deleteAllauthClientV1AccountAuthenticatorsWebauthn>>
>;
export type PostAllauthClientV1AccountAuthenticatorsWebauthnResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AccountAuthenticatorsWebauthn>>
>;
