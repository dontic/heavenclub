/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * Allauth spec
 * OpenAPI spec version: 1
 */
import type {
  AuthenticateWebAuthnBody,
  AuthenticatedResponse,
  LoginWebAuthnBody,
  ReauthenticateWebAuthnBody,
  WebAuthnRequestOptionsResponseResponse,
} from '../djangoAllauthHeadlessAPI.schemas';

import { customAxiosInstance } from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns the WebAuthn credential request options, that can be
processed using `parseRequestOptionsFromJSON()` on the frontend.

 * @summary Get WebAuthn credential request options for 2FA
 */
export const getAllauthClientV1AuthWebauthnAuthenticate = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<WebAuthnRequestOptionsResponseResponse>(
    { url: `/_allauth/${client}/v1/auth/webauthn/authenticate`, method: 'GET' },
    options
  );
};
/**
 * Perform Two-Factor Authentication using a WebAuthn credential.

 * @summary Perform 2FA using WebAuthn
 */
export const postAllauthClientV1AuthWebauthnAuthenticate = (
  client: 'app' | 'browser',
  authenticateWebAuthnBody: AuthenticateWebAuthnBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedResponse>(
    {
      url: `/_allauth/${client}/v1/auth/webauthn/authenticate`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authenticateWebAuthnBody,
    },
    options
  );
};
/**
 * Returns the WebAuthn credential request options, that can be
processed using `parseRequestOptionsFromJSON()` on the frontend.

 * @summary Get WebAuthn credential request options for reauthentication
 */
export const getAllauthClientV1AuthWebauthnReauthenticate = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<WebAuthnRequestOptionsResponseResponse>(
    { url: `/_allauth/${client}/v1/auth/webauthn/reauthenticate`, method: 'GET' },
    options
  );
};
/**
 * Reauthenticate the user using a WebAuthn credential.

 * @summary Reauthenticate using WebAuthn
 */
export const postAllauthClientV1AuthWebauthnReauthenticate = (
  client: 'app' | 'browser',
  reauthenticateWebAuthnBody: ReauthenticateWebAuthnBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedResponse>(
    {
      url: `/_allauth/${client}/v1/auth/webauthn/reauthenticate`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: reauthenticateWebAuthnBody,
    },
    options
  );
};
/**
 * Returns the WebAuthn credential request options, that can be
processed using `parseRequestOptionsFromJSON()` on the frontend.

 * @summary Get WebAuthn credential request options for login
 */
export const getAllauthClientV1AuthWebauthnLogin = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<WebAuthnRequestOptionsResponseResponse>(
    { url: `/_allauth/${client}/v1/auth/webauthn/login`, method: 'GET' },
    options
  );
};
/**
 * Login using a WebAuthn credential (Passkey). Both 200 and 401 can be
expected after a successful request.  The 401 can, for example, occur
when the credential passed was valid, but the email attached to the
account still requires verification.

 * @summary Login using WebAuthn
 */
export const postAllauthClientV1AuthWebauthnLogin = (
  client: 'app' | 'browser',
  loginWebAuthnBody: LoginWebAuthnBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedResponse>(
    {
      url: `/_allauth/${client}/v1/auth/webauthn/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginWebAuthnBody,
    },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type GetAllauthClientV1AuthWebauthnAuthenticateResult = NonNullable<
  Awaited<ReturnType<typeof getAllauthClientV1AuthWebauthnAuthenticate>>
>;
export type PostAllauthClientV1AuthWebauthnAuthenticateResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthWebauthnAuthenticate>>
>;
export type GetAllauthClientV1AuthWebauthnReauthenticateResult = NonNullable<
  Awaited<ReturnType<typeof getAllauthClientV1AuthWebauthnReauthenticate>>
>;
export type PostAllauthClientV1AuthWebauthnReauthenticateResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthWebauthnReauthenticate>>
>;
export type GetAllauthClientV1AuthWebauthnLoginResult = NonNullable<
  Awaited<ReturnType<typeof getAllauthClientV1AuthWebauthnLogin>>
>;
export type PostAllauthClientV1AuthWebauthnLoginResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthWebauthnLogin>>
>;
