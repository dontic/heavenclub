/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * Allauth spec
 * OpenAPI spec version: 1
 */
import type {
  EmailAddressesResponse,
  EmailBody,
  MarkPrimaryEmailBody,
  StatusOKResponse,
} from '../djangoAllauthHeadlessAPI.schemas';

import { customAxiosInstance } from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieves the list of email addreses of the account.

 * @summary List email addresses
 */
export const getAllauthClientV1AccountEmail = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<EmailAddressesResponse>(
    { url: `/_allauth/${client}/v1/account/email`, method: 'GET' },
    options
  );
};
/**
 * Add a new email address to the account. The email address will be marked as unverified, and
an email verification mail will be sent.

 * @summary Add an email addresses

 */
export const postAllauthClientV1AccountEmail = (
  client: 'app' | 'browser',
  emailBody: EmailBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<EmailAddressesResponse>(
    {
      url: `/_allauth/${client}/v1/account/email`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: emailBody,
    },
    options
  );
};
/**
 * Requests for (another) email verification email to be sent. Note that
sending emails is rate limited, so when you send too many requests the
email will not be sent.

 * @summary Request email verification
 */
export const putAllauthClientV1AccountEmail = (
  client: 'app' | 'browser',
  emailBody: EmailBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<StatusOKResponse>(
    {
      url: `/_allauth/${client}/v1/account/email`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: emailBody,
    },
    options
  );
};
/**
 * Used to change primary email address to a different one. Note that only verified email addresses
can be marked as primary.

 * @summary Change primary email address
 */
export const patchAllauthClientV1AccountEmail = (
  client: 'app' | 'browser',
  markPrimaryEmailBody: MarkPrimaryEmailBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<EmailAddressesResponse>(
    {
      url: `/_allauth/${client}/v1/account/email`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: markPrimaryEmailBody,
    },
    options
  );
};
/**
 * Used to remove an email address.

 * @summary Remove an email address
 */
export const deleteAllauthClientV1AccountEmail = (
  client: 'app' | 'browser',
  emailBody: EmailBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<EmailAddressesResponse>(
    {
      url: `/_allauth/${client}/v1/account/email`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: emailBody,
    },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type GetAllauthClientV1AccountEmailResult = NonNullable<
  Awaited<ReturnType<typeof getAllauthClientV1AccountEmail>>
>;
export type PostAllauthClientV1AccountEmailResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AccountEmail>>
>;
export type PutAllauthClientV1AccountEmailResult = NonNullable<
  Awaited<ReturnType<typeof putAllauthClientV1AccountEmail>>
>;
export type PatchAllauthClientV1AccountEmailResult = NonNullable<
  Awaited<ReturnType<typeof patchAllauthClientV1AccountEmail>>
>;
export type DeleteAllauthClientV1AccountEmailResult = NonNullable<
  Awaited<ReturnType<typeof deleteAllauthClientV1AccountEmail>>
>;
