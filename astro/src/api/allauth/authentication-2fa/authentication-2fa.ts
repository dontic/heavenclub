/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * Allauth spec
 * OpenAPI spec version: 1
 */
import type { AuthenticatedByPasswordAnd2FAResponse, MFAAuthenticateBody } from '../djangoAllauthHeadlessAPI.schemas';

import { customAxiosInstance } from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * If, during authentication,  a response with status 401 is encountered where one of the pending
flows has ID `mfa_authenticate`, that indicates that the Two-Factor Authentication stage needs to
be completed.

 * @summary Two-factor authentication
 */
export const postAllauthClientV1Auth2faAuthenticate = (
  client: 'app' | 'browser',
  mFAAuthenticateBody: MFAAuthenticateBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedByPasswordAnd2FAResponse>(
    {
      url: `/_allauth/${client}/v1/auth/2fa/authenticate`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: mFAAuthenticateBody,
    },
    options
  );
};
/**
 * In order to safeguard the account, some actions require the user to be
recently authenticated.  If you try to perform such an action without
having been recently authenticated, a `401` status is returned, listing
flows that can be performed to reauthenticate. One such flow is the flow
with ID `mfa_reauthenticate`, which allows for the user to input an
authenticator code (e.g. TOTP or recovery code). This is the endpoint
related towards that flow.

 * @summary Reauthenticate using 2FA
 */
export const postAllauthClientV1Auth2faReauthenticate = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedByPasswordAnd2FAResponse>(
    { url: `/_allauth/${client}/v1/auth/2fa/reauthenticate`, method: 'POST' },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type PostAllauthClientV1Auth2faAuthenticateResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1Auth2faAuthenticate>>
>;
export type PostAllauthClientV1Auth2faReauthenticateResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1Auth2faReauthenticate>>
>;
