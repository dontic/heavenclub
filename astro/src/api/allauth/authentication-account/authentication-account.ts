/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * Allauth spec
 * OpenAPI spec version: 1
 */
import type {
  AuthenticatedByPasswordResponse,
  AuthenticatedResponse,
  EmailVerificationInfoResponse,
  LoginBody,
  ReauthenticateBody,
  SignupBody,
  VerifyEmailBody,
  VerifyPhoneBody,
} from '../djangoAllauthHeadlessAPI.schemas';

import { customAxiosInstance } from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Login using a username-password or email-password combination.

 * @summary Login
 */
export const postAllauthClientV1AuthLogin = (
  client: 'app' | 'browser',
  loginBody: LoginBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedByPasswordResponse>(
    {
      url: `/_allauth/${client}/v1/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginBody,
    },
    options
  );
};
/**
 * Whether or not `username`, `email`, `phone` or combination of those are
required depends on the configuration of django-allauth. Additionally,
if a custom signup form is used there may be other custom properties
required.

 * @summary Signup
 */
export const postAllauthClientV1AuthSignup = (
  client: 'app' | 'browser',
  signupBody: SignupBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedByPasswordResponse>(
    {
      url: `/_allauth/${client}/v1/auth/signup`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signupBody,
    },
    options
  );
};
/**
 * Obtain email verification information, given the token that was sent to
the user by email.

 * @summary Get email verification information
 */
export const getAllauthClientV1AuthEmailVerify = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<EmailVerificationInfoResponse>(
    { url: `/_allauth/${client}/v1/auth/email/verify`, method: 'GET' },
    options
  );
};
/**
 * Complete the email verification process. Depending on the configuration,
email addresses are either verified by opening a link that is sent to
their email address, or, by inputting a code that is sent. On the API,
both cases are handled identically. Meaning, the required key is either
the one from the link, or, the code itself.

Note that a status code of 401 does not imply failure. It indicates that
the email verification was successful, yet, the user is still not signed
in. For example, in case `ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION` is set to
`False`, a 401 is returned when verifying as part of login/signup.

 * @summary Verify an email
 */
export const postAllauthClientV1AuthEmailVerify = (
  client: 'app' | 'browser',
  verifyEmailBody: VerifyEmailBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedResponse>(
    {
      url: `/_allauth/${client}/v1/auth/email/verify`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: verifyEmailBody,
    },
    options
  );
};
/**
 * Complete the phone number verification process. Note that a status code
of 401 does not imply failure. It merely indicates that the phone number
verification was successful, yet, the user is still not signed in.

 * @summary Verify a phone number
 */
export const postAllauthClientV1AuthPhoneVerify = (
  client: 'app' | 'browser',
  verifyPhoneBody: VerifyPhoneBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedResponse>(
    {
      url: `/_allauth/${client}/v1/auth/phone/verify`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: verifyPhoneBody,
    },
    options
  );
};
/**
 * In order to safeguard the account, some actions require the user to be
recently authenticated.  If you try to perform such an action without
having been recently authenticated, a `401` status is returned, listing
flows that can be performed to reauthenticate. One such flow is the flow
with ID `reauthenticate`, which allows for the user to input the
password. This is the endpoint related towards that flow.

 * @summary Reauthenticate
 */
export const postAllauthClientV1AuthReauthenticate = (
  client: 'app' | 'browser',
  reauthenticateBody: ReauthenticateBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedByPasswordResponse>(
    {
      url: `/_allauth/${client}/v1/auth/reauthenticate`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: reauthenticateBody,
    },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type PostAllauthClientV1AuthLoginResult = NonNullable<Awaited<ReturnType<typeof postAllauthClientV1AuthLogin>>>;
export type PostAllauthClientV1AuthSignupResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthSignup>>
>;
export type GetAllauthClientV1AuthEmailVerifyResult = NonNullable<
  Awaited<ReturnType<typeof getAllauthClientV1AuthEmailVerify>>
>;
export type PostAllauthClientV1AuthEmailVerifyResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthEmailVerify>>
>;
export type PostAllauthClientV1AuthPhoneVerifyResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthPhoneVerify>>
>;
export type PostAllauthClientV1AuthReauthenticateResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthReauthenticate>>
>;
