/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * Allauth spec
 * OpenAPI spec version: 1
 */
export interface Session {
  user_agent: string;
  ip: string;
  created_at: Timestamp;
  is_current: boolean;
  id: number;
  last_seen_at?: Timestamp;
}

export type AccountConfigurationLoginMethodsItem =
  (typeof AccountConfigurationLoginMethodsItem)[keyof typeof AccountConfigurationLoginMethodsItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountConfigurationLoginMethodsItem = {
  email: 'email',
  username: 'username',
} as const;

/**
 * Configuration of the Django `allauth.account` app.

 */
export interface AccountConfiguration {
  login_methods?: AccountConfigurationLoginMethodsItem[];
  is_open_for_signup: boolean;
  email_verification_by_code_enabled: boolean;
  login_by_code_enabled: boolean;
  password_reset_by_code_enabled?: boolean;
}

export type AuthenticationResponseStatus =
  (typeof AuthenticationResponseStatus)[keyof typeof AuthenticationResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthenticationResponseStatus = {
  NUMBER_401: 401,
} as const;

export type AuthenticationResponseData = {
  flows: Flow[];
};

/**
 * An authentication related response.

 */
export interface AuthenticationResponse {
  status: AuthenticationResponseStatus;
  data: AuthenticationResponseData;
  meta: AuthenticationMeta;
}

export type ForbiddenResponseStatus = (typeof ForbiddenResponseStatus)[keyof typeof ForbiddenResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ForbiddenResponseStatus = {
  NUMBER_403: 403,
} as const;

export interface ForbiddenResponse {
  status: ForbiddenResponseStatus;
}

export type ConflictResponseStatus = (typeof ConflictResponseStatus)[keyof typeof ConflictResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConflictResponseStatus = {
  NUMBER_409: 409,
} as const;

export interface ConflictResponse {
  status: ConflictResponseStatus;
}

export interface EndSessions {
  /** The IDs of the sessions that are to be ended.
   */
  sessions: number[];
}

/**
 * A phone number.

 */
export interface PhoneNumber {
  phone: string;
  verified: boolean;
}

export interface PhoneNumbersResponse {
  status: StatusOK;
  data: PhoneNumber[];
}

export interface PhoneNumberChangeResponse {
  status: StatusAccepted;
  data: PhoneNumber[];
}

export type ReauthenticationResponseStatus =
  (typeof ReauthenticationResponseStatus)[keyof typeof ReauthenticationResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReauthenticationResponseStatus = {
  NUMBER_401: 401,
} as const;

/**
 * A response indicating reauthentication is required.

 */
export interface ReauthenticationResponse {
  status: ReauthenticationResponseStatus;
  data: Authenticated;
  meta: AuthenticatedMeta;
}

export type SessionGoneResponseStatus = (typeof SessionGoneResponseStatus)[keyof typeof SessionGoneResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionGoneResponseStatus = {
  NUMBER_410: 410,
} as const;

export type SessionGoneResponseData = { [key: string]: unknown };

/**
 * The session is expired or invalid.

 */
export interface SessionGoneResponse {
  status: SessionGoneResponseStatus;
  data: SessionGoneResponseData;
  meta: AuthenticationMeta;
}

export interface BaseAuthenticationMeta {
  /** The session token (`app` clients only).
   */
  session_token?: string;
  /** The access token (`app` clients only).
   */
  access_token?: string;
}

/**
 * Metadata available in an authentication related response.

 */
export type AuthenticationMetaAllOf = {
  is_authenticated: boolean;
};

export type AuthenticationMeta = BaseAuthenticationMeta & AuthenticationMetaAllOf;

/**
 * Metadata available in an re-authentication related response.

 */
export type AuthenticatedMetaAllOf = {
  is_authenticated: boolean;
};

export type AuthenticatedMeta = BaseAuthenticationMeta & AuthenticatedMetaAllOf;

export type FlowId = (typeof FlowId)[keyof typeof FlowId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FlowId = {
  login: 'login',
  mfa_authenticate: 'mfa_authenticate',
  mfa_reauthenticate: 'mfa_reauthenticate',
  provider_redirect: 'provider_redirect',
  provider_signup: 'provider_signup',
  provider_token: 'provider_token',
  reauthenticate: 'reauthenticate',
  signup: 'signup',
  verify_email: 'verify_email',
  verify_phone: 'verify_phone',
} as const;

export interface Flow {
  id: FlowId;
  provider?: Provider;
  is_pending?: boolean;
}

export interface Authenticated {
  user: User;
  /** A list of methods used to authenticate.
   */
  methods: AuthenticationMethod[];
}

export type AuthenticationMethodOneOfMethod =
  (typeof AuthenticationMethodOneOfMethod)[keyof typeof AuthenticationMethodOneOfMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthenticationMethodOneOfMethod = {
  password: 'password',
} as const;

export type AuthenticationMethodOneOf = {
  method: AuthenticationMethodOneOfMethod;
  at: Timestamp;
  email?: Email;
  username?: Username;
};

export type AuthenticationMethodOneOfThreeMethod =
  (typeof AuthenticationMethodOneOfThreeMethod)[keyof typeof AuthenticationMethodOneOfThreeMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthenticationMethodOneOfThreeMethod = {
  password: 'password',
} as const;

export type AuthenticationMethodOneOfThree = {
  method: AuthenticationMethodOneOfThreeMethod;
  at: Timestamp;
  reauthenticated: boolean;
};

export type AuthenticationMethodOneOfFiveMethod =
  (typeof AuthenticationMethodOneOfFiveMethod)[keyof typeof AuthenticationMethodOneOfFiveMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthenticationMethodOneOfFiveMethod = {
  socialaccount: 'socialaccount',
} as const;

export type AuthenticationMethodOneOfFive = {
  method: AuthenticationMethodOneOfFiveMethod;
  at: Timestamp;
  provider: ProviderID;
  uid: ProviderAccountID;
};

export type AuthenticationMethodOneOfSevenMethod =
  (typeof AuthenticationMethodOneOfSevenMethod)[keyof typeof AuthenticationMethodOneOfSevenMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthenticationMethodOneOfSevenMethod = {
  mfa: 'mfa',
} as const;

export type AuthenticationMethodOneOfSeven = {
  method: AuthenticationMethodOneOfSevenMethod;
  at: Timestamp;
  type: AuthenticatorType;
  reauthenticated?: boolean;
};

export type AuthenticationMethod =
  | AuthenticationMethodOneOf
  | AuthenticationMethodOneOfThree
  | AuthenticationMethodOneOfFive
  | AuthenticationMethodOneOfSeven;

export interface AuthenticatedResponse {
  status: StatusOK;
  data: Authenticated;
  meta: AuthenticationMeta;
}

export interface MFAAuthenticate {
  code: AuthenticatorCode;
}

export interface ConfirmLoginCode {
  code: Code;
}

/**
 * The client ID (in case of OAuth2 or OpenID Connect based providers)

 */
export type ClientID = string;

/**
 * The token.

 */
export type ProviderTokenToken = {
  client_id: ClientID;
  /** The ID token.
   */
  id_token?: string;
  /** The access token.
   */
  access_token?: string;
};

export interface ProviderToken {
  provider: ProviderID;
  process: Process;
  /** The token.
   */
  token: ProviderTokenToken;
}

export interface ProviderRedirect {
  provider: ProviderID;
  /** The URL to return to after the redirect flow is complete.
   */
  callback_url: string;
  process: Process;
}

export interface RequestPassword {
  email: Email;
}

export type RequestLoginCodeAnyOf = {
  phone: Phone;
};

export type RequestLoginCodeAnyOfTwo = {
  email: Email;
};

export type RequestLoginCode = RequestLoginCodeAnyOf | RequestLoginCodeAnyOfTwo;

export interface Reauthenticate {
  password: Password;
}

export type ProviderSignup = BaseSignup;

export type PasskeySignup = BaseSignup;

export interface BaseSignup {
  email?: Email;
  phone?: Phone;
  username?: Username;
  /** The user's first name.
   */
  first_name?: string;
  /** The name of the team.
   */
  team_name?: string;
}

export type SignupAllOf = {
  password: Password;
};

export type Signup = BaseSignup & SignupAllOf;

/**
 * The username.

 */
export type Username = string;

/**
 * The email address.

 */
export type Email = string;

/**
 * The phone number.

 */
export type Phone = string;

export type LoginAnyOf = {
  username: Username;
};

export type LoginAnyOfTwo = {
  email: Email;
};

export type LoginAnyOfThree = {
  phone: Phone;
};

export type Login =
  | (LoginAnyOf & {
      password: Password;
    })
  | (LoginAnyOfTwo & {
      password: Password;
    })
  | (LoginAnyOfThree & {
      password: Password;
    });

export type StatusOK = (typeof StatusOK)[keyof typeof StatusOK];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusOK = {
  NUMBER_200: 200,
} as const;

export type StatusAccepted = (typeof StatusAccepted)[keyof typeof StatusAccepted];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusAccepted = {
  NUMBER_202: 202,
} as const;

/**
 * Authenticator ID.

 */
export type AuthenticatorID = number;

/**
 * Configuration of the Django `allauth.socialaccount` app.

 */
export interface SocialAccountConfiguration {
  providers: ProviderList;
}

/**
 * Configuration of the Django `allauth.mfa` app.

 */
export interface MFAConfiguration {
  /** Matches `settings.MFA_SUPPORTED_TYPES`.
   */
  supported_types: AuthenticatorType[];
}

/**
 * Configuration of the Django `allauth.usersessions` app.

 */
export interface UserSessionsConfiguration {
  /** Matches `settings.USERSESSIONS_TRACK_ACTIVITY`.
   */
  track_activity: boolean;
}

export type ConfigurationResponseData = {
  account: AccountConfiguration;
  socialaccount?: SocialAccountConfiguration;
  mfa?: MFAConfiguration;
  usersessions?: UserSessionsConfiguration;
};

export interface ConfigurationResponse {
  data: ConfigurationResponseData;
  status: StatusOK;
}

export interface ResetPassword {
  /** The password reset key */
  key: string;
  password: Password;
}

export interface VerifyEmail {
  /** The email verification key */
  key: string;
}

export interface VerifyPhone {
  /** The phone verification code */
  code: string;
}

/**
 * @nullable
 */
export type OptionalTimestamp = Timestamp;

/**
 * An epoch based timestamp (trivial to parse using: `new Date(value)*1000`)

 */
export type Timestamp = number;

/**
 * An authenticator code.

 */
export type AuthenticatorCode = string;

/**
 * An one-time code.

 */
export type Code = string;

/**
 * The type of authenticator.

 */
export type AuthenticatorType = (typeof AuthenticatorType)[keyof typeof AuthenticatorType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthenticatorType = {
  recovery_codes: 'recovery_codes',
  totp: 'totp',
} as const;

/**
 * The password.

 */
export type Password = string;

export type ErrorResponseStatus = (typeof ErrorResponseStatus)[keyof typeof ErrorResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorResponseStatus = {
  NUMBER_400: 400,
} as const;

export type ErrorResponseErrorsItem = {
  /** An error code.
   */
  code: string;
  /** The name of the input parameter that was incorrect.
   */
  param?: string;
  /** A human readable error message.
   */
  message: number;
};

export interface ErrorResponse {
  status?: ErrorResponseStatus;
  errors?: ErrorResponseErrorsItem[];
}

/**
 * The process to be executed when the user successfully
authenticates. When set to `login`, the user will be logged into the
account to which the provider account is connected, or if no such
account exists, a signup will occur. If set to `connect`, the provider
account will be connected to the list of provider accounts for the
currently authenticated user.

 */
export type Process = (typeof Process)[keyof typeof Process];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Process = {
  login: 'login',
  connect: 'connect',
} as const;

/**
 * The provider ID.

 */
export type ProviderID = string;

/**
 * The provider specific account ID.

 */
export type ProviderAccountID = string;

/**
 * The user ID.

 */
export type UserId = number | string;

/**
 * The user's role in the system.

 */
export type UserRole = (typeof UserRole)[keyof typeof UserRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  OWNER: 'OWNER',
} as const;

export interface User {
  /** The user ID.
   */
  id?: UserId;
  /** The display name for the user.
   */
  display?: string;
  /** Whether or not the account has a password set.
   */
  has_usable_password?: boolean;
  email?: Email;
  username?: Username;
  /** The user's role in the system.
   */
  role?: UserRole;
}

export interface EmailAddress {
  email: Email;
  primary: boolean;
  verified: boolean;
}

export interface BaseAuthenticator {
  last_used_at: Timestamp;
  created_at: Timestamp;
}

export type TOTPAuthenticatorAllOfType = (typeof TOTPAuthenticatorAllOfType)[keyof typeof TOTPAuthenticatorAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TOTPAuthenticatorAllOfType = {
  totp: 'totp',
} as const;

export type TOTPAuthenticatorAllOf = {
  type: TOTPAuthenticatorAllOfType;
};

export type TOTPAuthenticator = BaseAuthenticator & TOTPAuthenticatorAllOf;

export type WebAuthnAuthenticatorAllOfType =
  (typeof WebAuthnAuthenticatorAllOfType)[keyof typeof WebAuthnAuthenticatorAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebAuthnAuthenticatorAllOfType = {
  webauthn: 'webauthn',
} as const;

export type WebAuthnAuthenticatorAllOf = {
  type: WebAuthnAuthenticatorAllOfType;
  id: AuthenticatorID;
  name: string;
  /** Whether or not this authenticator represents a passkey. Absent if it is not specified.
   */
  is_passwordless?: boolean;
};

export type WebAuthnAuthenticator = BaseAuthenticator & WebAuthnAuthenticatorAllOf;

/**
 * The authenticator type.

 */
export type RecoveryCodesAuthenticatorAllOfType =
  (typeof RecoveryCodesAuthenticatorAllOfType)[keyof typeof RecoveryCodesAuthenticatorAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecoveryCodesAuthenticatorAllOfType = {
  recovery_codes: 'recovery_codes',
} as const;

export type RecoveryCodesAuthenticatorAllOf = {
  /** The authenticator type.
   */
  type: RecoveryCodesAuthenticatorAllOfType;
  /** The total number of recovery codes that initially were available.
   */
  total_code_count: number;
  /** The number of recovery codes that are unused.
   */
  unused_code_count: number;
};

export type RecoveryCodesAuthenticator = BaseAuthenticator & RecoveryCodesAuthenticatorAllOf;

export type SensitiveRecoveryCodesAuthenticatorAllOf = {
  /** The list of unused codes.
   */
  unused_codes: AuthenticatorCode[];
};

export type SensitiveRecoveryCodesAuthenticator = RecoveryCodesAuthenticator & SensitiveRecoveryCodesAuthenticatorAllOf;

export type AuthenticatorListItem = TOTPAuthenticator | RecoveryCodesAuthenticator | WebAuthnAuthenticator;

export type AuthenticatorList = AuthenticatorListItem[];

export type ProviderList = Provider[];

export type ProviderFlowsItem = (typeof ProviderFlowsItem)[keyof typeof ProviderFlowsItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProviderFlowsItem = {
  provider_redirect: 'provider_redirect',
  provider_token: 'provider_token',
} as const;

export interface Provider {
  /** The provider ID.
   */
  id: string;
  /** The name of the provider.
   */
  name: string;
  /** The client ID (in case of OAuth2 or OpenID Connect based providers)
   */
  client_id?: string;
  /** The authentication flows the provider integration supports.
   */
  flows: ProviderFlowsItem[];
}

export interface ProviderAccount {
  uid: ProviderAccountID;
  /** A name derived from the third-party provider account data.
   */
  display: string;
  provider: Provider;
}

export type EmailVerificationInfoData = {
  email: Email;
  user: User;
};

export type EmailVerificationInfoMeta = {
  is_authenticating: boolean;
};

export interface EmailVerificationInfo {
  status: StatusOK;
  data: EmailVerificationInfoData;
  meta: EmailVerificationInfoMeta;
}

export type WebAuthnCredentialRequestOptionsRequestOptions = { [key: string]: unknown };

export interface WebAuthnCredentialRequestOptions {
  request_options: WebAuthnCredentialRequestOptionsRequestOptions;
}

export type WebAuthnCredentialCreationOptionsCreationOptions = { [key: string]: unknown };

export interface WebAuthnCredentialCreationOptions {
  creation_options: WebAuthnCredentialCreationOptionsCreationOptions;
}

export interface WebAuthnCredential {
  [key: string]: unknown;
}

/**
 * The account prohibits adding an authenticator, e.g. because of an unverified email address.

 */
export type AddAuthenticatorConflictResponse = ConflictResponse;

export type AuthenticatorsResponse = {
  status: StatusOK;
  data: AuthenticatorList;
};

/**
 * Authenticated by password.

 */
export type AuthenticatedByPasswordResponse = AuthenticatedResponse;

/**
 * Authenticated by code.

 */
export type AuthenticatedByCodeResponse = AuthenticatedResponse;

/**
 * Authenticated by password and 2FA.

 */
export type AuthenticatedByPasswordAnd2FAResponse = AuthenticatedResponse;

export type AuthenticationOrReauthenticationResponse = AuthenticationResponse | ReauthenticationResponse;

export type EmailAddressesResponse = {
  status: StatusOK;
  data: EmailAddress[];
};

/**
 * Email verification information.
 */
export type EmailVerificationInfoResponse = EmailVerificationInfo;

export type NotFoundResponseStatus = (typeof NotFoundResponseStatus)[keyof typeof NotFoundResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotFoundResponseStatus = {
  NUMBER_404: 404,
} as const;

export type NotFoundResponse = {
  status: NotFoundResponseStatus;
};

export type PasswordResetInfoResponseData = {
  user?: User;
};

export type PasswordResetInfoResponse = {
  status: StatusOK;
  data: PasswordResetInfoResponseData;
};

export type ProviderAccountsResponse = {
  status: StatusOK;
  data: ProviderAccount[];
};

export type ProviderSignupResponseData = {
  email: EmailAddress[];
  account: ProviderAccount;
  user: User;
};

export type ProviderSignupResponse = {
  status: StatusOK;
  data: ProviderSignupResponseData;
};

/**
 * The response indicates reauthentication is required.

 */
export type ReauthenticationRequiredResponse = unknown;

export type RecoveryCodesResponse = {
  status: StatusOK;
  data: SensitiveRecoveryCodesAuthenticator;
};

export type SessionsResponse = {
  status: StatusOK;
  data: Session[];
};

export type StatusOKResponse = {
  status: StatusOK;
};

export type TOTPAuthenticatorResponse = {
  status: StatusOK;
  data: TOTPAuthenticator;
};

export type TOTPAuthenticatorNotFoundResponseStatus =
  (typeof TOTPAuthenticatorNotFoundResponseStatus)[keyof typeof TOTPAuthenticatorNotFoundResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TOTPAuthenticatorNotFoundResponseStatus = {
  NUMBER_404: 404,
} as const;

export type TOTPAuthenticatorNotFoundResponseMeta = {
  /** A TOTP secret that can be used to setup a new authenticator.
   */
  secret: string;
  /** otpauth URI from which a QR code can be generated and scanned by OTP clients.
   */
  totp_url: string;
};

export type TOTPAuthenticatorNotFoundResponse = {
  status: TOTPAuthenticatorNotFoundResponseStatus;
  meta: TOTPAuthenticatorNotFoundResponseMeta;
};

/**
 * There is no authenticated session.

 */
export type UnauthenticatedResponse = AuthenticationResponse;

export type WebAuthnRequestOptionsResponseResponse = {
  status: StatusOK;
  data: WebAuthnCredentialRequestOptions;
};

export type WebAuthnCreationOptionsResponseResponse = {
  status: StatusOK;
  data: WebAuthnCredentialCreationOptions;
};

export type WebAuthnAuthenticatorResponse = {
  status: StatusOK;
  data: WebAuthnAuthenticator;
};

export type AddWebAuthnAuthenticatorResponseMeta = {
  /** Whether or not recovery codes where generated automatically.
   */
  recovery_codes_generated?: boolean;
};

export type AddWebAuthnAuthenticatorResponse = {
  status: StatusOK;
  data: WebAuthnAuthenticator;
  meta: AddWebAuthnAuthenticatorResponseMeta;
};

/**
 * Login.
 */
export type LoginBody = Login;

export type LoginWebAuthnBody = {
  credential: WebAuthnCredential;
};

export type ReauthenticateWebAuthnBody = {
  credential: WebAuthnCredential;
};

export type AuthenticateWebAuthnBody = {
  credential: WebAuthnCredential;
};

export type MFAAuthenticateBody = MFAAuthenticate;

export type ConfirmLoginCodeBody = ConfirmLoginCode;

export type EndSessionsBody = EndSessions;

/**
 * Signup using a passkey
 */
export type PasskeySignupBody = PasskeySignup;

export type ProviderAccountBody = {
  provider: ProviderID;
  account: ProviderAccountID;
};

/**
 * Initiate the provider redirect flow.

 */
export type ProviderRedirectBody = ProviderRedirect;

/**
 * Provider signup.
 */
export type ProviderSignupBody = ProviderSignup;

export type ProviderTokenBody = ProviderToken;

/**
 * Reauthenticate.
 */
export type ReauthenticateBody = Reauthenticate;

/**
 * Request password.
 */
export type RequestPasswordBody = RequestPassword;

/**
 * Request a login code.
 */
export type RequestLoginCodeBody = RequestLoginCode;

export type SetupTOTPBody = {
  code: AuthenticatorCode;
};

/**
 * Signup
 */
export type SignupBody = Signup;

export type ChangePasswordBody = {
  current_password?: Password;
  /** The current password.
   */
  new_password: string;
};

export type EmailBody = {
  /** An email address.
   */
  email: string;
};

export type MarkPrimaryEmailBody = {
  /** An email address.
   */
  email: string;
  /** Primary flag.
   */
  primary: boolean;
};

export type PhoneBody = {
  phone: string;
};

export type ResetPasswordBody = ResetPassword;

export type VerifyEmailBody = VerifyEmail;

export type VerifyPhoneBody = VerifyPhone;

export type UpdateWebAuthnBody = {
  id?: AuthenticatorID;
  name?: string;
};

export type AddWebAuthnAuthenticatorBody = {
  name?: string;
  credential: WebAuthnCredential;
};

export type DeleteWebAuthnBody = {
  /** The IDs of the authenticator that are to be deleted.
   */
  authenticators: AuthenticatorID[];
};

/**
 * The email verification key
 */
export type EmailVerificationKeyParameter = string;

/**
 * The password reset key
 */
export type PasswordResetKeyParameter = string;

/**
 * Session token. Only needed when `client` is equal to `app`.

 */
export type SessionTokenParameter = string;
