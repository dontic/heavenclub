/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * django-allauth: Headless API
 * Allauth spec
 * OpenAPI spec version: 1
 */
import type {
  AuthenticatedByPasswordResponse,
  PasswordResetInfoResponse,
  RequestPasswordBody,
  ResetPasswordBody,
  StatusOKResponse,
} from '../djangoAllauthHeadlessAPI.schemas';

import { customAxiosInstance } from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Initiates the password reset procedure. Depending on whether or not
`ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED` is `True`, the procedure is
either stateless or stateful.

In case codes are used, it is stateful, and a new
`password_reset_by_code` flow is started. In this case, on a successful
password reset request, you will receive a 401 indicating the pending
status of this flow.

In case password reset is configured to use (stateless) links, you will
receive a 200 on a successful password reset request.

 * @summary Request password
 */
export const postAllauthClientV1AuthPasswordRequest = (
  client: 'app' | 'browser',
  requestPasswordBody: RequestPasswordBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<StatusOKResponse>(
    {
      url: `/_allauth/${client}/v1/auth/password/request`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestPasswordBody,
    },
    options
  );
};
/**
 * Used to obtain information on and validate a password reset key.  The
key passed is either the key encoded in the password reset URL that the
user has received per email, or, the password reset code in case of
`ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED`. Note that in case of a code,
the number of requests you can make is limited (by
`ACCOUNT_PASSWORD_RESET_BY_CODE_MAX_ATTEMPTS`).

 * @summary Get password reset information
 */
export const getAllauthClientV1AuthPasswordReset = (
  client: 'app' | 'browser',
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<PasswordResetInfoResponse>(
    { url: `/_allauth/${client}/v1/auth/password/reset`, method: 'GET' },
    options
  );
};
/**
 * Perform the password reset, by handing over the password reset key and
the new password. After successfully completing the password reset, the
user is either logged in (in case `ACCOUNT_LOGIN_ON_PASSWORD_RESET` is
`True`), or, the user will need to proceed to the login page.  In case
of the former, a `200` status code is returned, in case of the latter a
401.

 * @summary Reset password
 */
export const postAllauthClientV1AuthPasswordReset = (
  client: 'app' | 'browser',
  resetPasswordBody: ResetPasswordBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<AuthenticatedByPasswordResponse>(
    {
      url: `/_allauth/${client}/v1/auth/password/reset`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: resetPasswordBody,
    },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type PostAllauthClientV1AuthPasswordRequestResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthPasswordRequest>>
>;
export type GetAllauthClientV1AuthPasswordResetResult = NonNullable<
  Awaited<ReturnType<typeof getAllauthClientV1AuthPasswordReset>>
>;
export type PostAllauthClientV1AuthPasswordResetResult = NonNullable<
  Awaited<ReturnType<typeof postAllauthClientV1AuthPasswordReset>>
>;
